include get.e
include dll.e
include machine.e
include msgbox.e
include constants.ew
include GLfunc.ew
include GLconst.ew
include 3Dobject.ew
with trace

without warning

atom hRC, hDC, hWnd, hInstance, ClassName
sequence keys keys = repeat(0,256)  -- array to hold key presses

integer active, fullscreen
active = TRUE
fullscreen = TRUE
hRC = NULL
hDC = NULL
hWnd = NULL
hInstance = NULL

object retval

atom xrot, xspeed, yrot, yspeed
sequence obj                                           -- Object
xrot=0 xspeed=0                            -- X Rotation & X Speed
yrot=0 yspeed=0                            -- Y Rotation & Y Speed
obj = {0,0, repeat({0.0,0.0,0.0},100),repeat({{0,0,0},repeat({0.0,0.0,0.0},3),{0,0,0},{0.0,0.0,0.0,0.0},0},200)}

sequence MemoryArray
MemoryArray = {{ 0.0, 5.0,-4.0, 1.0},{ 0.7, 0.7, 0.7, 1.0},{ 0.6, 0.6, 0.6, 1.0},{-0.2, -0.2, -0.2, 1.0},
                          {0.4, 0.4, 0.4, 1.0},{0.2, 0.6, 0.9, 1.0},{0.0, 0.0, 0.0, 1.0},{0.0},{-2.0,-2.0,-5.0},
                          {-4.0,-5.0,-6.0}}
atom LightPos, LightAmb, LightDif, LightSpc, MatAmb, MatDif, MatSpc, MatShn, ObjPos, SpherePos
LightPos = allocate(16)  LightAmb = allocate(16)  LightDif = allocate(16)  LightSpc = allocate(16)
MatAmb = allocate(16)  MatDif = allocate(16)  MatSpc = allocate(16)  MatShn = allocate(4)
ObjPos = allocate(12)  SpherePos = allocate(12)

sequence Vectors
Vectors = {LightPos,LightAmb,LightDif,LightSpc,MatAmb,MatDif,MatSpc,MatShn,ObjPos,SpherePos}

procedure MemFloatArray(atom address, sequence floats)
    for loop = 0 to length(floats) -1 do
        poke(address+loop*4,atom_to_float32(floats[loop+1]))
    end for
end procedure

for loop = 1 to length(Vectors) do
    MemFloatArray(Vectors[loop],MemoryArray[loop])
end for

atom q                                      -- Quadratic For Drawing A Sphere

procedure VMatMult(atom M, atom v)
atom res                                        -- Hold Calculated Results

    res = allocate(16)
    poke(res,atom_to_float32(float32_to_atom(peek({M,4}))*float32_to_atom(peek({v,4})) +
                                              float32_to_atom(peek({M+16,4}))*float32_to_atom(peek({v+4,4})) +
                                              float32_to_atom(peek({M+32,4}))*float32_to_atom(peek({v+8,4})) +
                                              float32_to_atom(peek({M+48,4}))*float32_to_atom(peek({v+12,4}))))
    poke(res+4,atom_to_float32(float32_to_atom(peek({M+4,4}))*float32_to_atom(peek({v,4})) +
                                              float32_to_atom(peek({M+20,4}))*float32_to_atom(peek({v+4,4})) +
                                              float32_to_atom(peek({M+36,4}))*float32_to_atom(peek({v+8,4})) +
                                              float32_to_atom(peek({M+52,4}))*float32_to_atom(peek({v+12,4}))))
    poke(res+8,atom_to_float32(float32_to_atom(peek({M+8,4}))*float32_to_atom(peek({v,4})) +
                                              float32_to_atom(peek({M+24,4}))*float32_to_atom(peek({v+4,4})) +
                                              float32_to_atom(peek({M+40,4}))*float32_to_atom(peek({v+8,4})) +
                                              float32_to_atom(peek({M+56,4}))*float32_to_atom(peek({v+12,4}))))
    poke(res+12,atom_to_float32(float32_to_atom(peek({M+12,4}))*float32_to_atom(peek({v,4})) +
                                              float32_to_atom(peek({M+28,4}))*float32_to_atom(peek({v+4,4})) +
                                              float32_to_atom(peek({M+44,4}))*float32_to_atom(peek({v+8,4})) +
                                              float32_to_atom(peek({M+60,4}))*float32_to_atom(peek({v+12,4}))))
    poke(v,peek({res,4}))                                       -- Results Are Stored Back In v[]
    poke(v+4,peek({res+4,4}))
    poke(v+8,peek({res+8,4}))
    poke(v+12,peek({res+12,4}))                         -- Homogenous Coordinate
end procedure

function InitGLObjects()                                        -- Initialize Objects

    retval = ReadObject("Data/Object2.txt",obj)
    if not retval[1] then         -- Read Object2 Into obj
        return FALSE                                    -- If Failed Return False
    end if

    obj = SetConnectivity(retval[2])                                -- Set Face To Face Connectivity

    for loop = 1 to obj[1] do         -- Loop Through All Object Planes
        obj = CalcPlane(obj, obj[4][loop],loop)               -- Compute Plane Equations For All Faces
    end for

    return TRUE                                     -- Return True
end function

procedure ReSizeGLScene(integer width, integer height)
    if height = 0 then
        height = 1
    end if
    c_proc(glViewport,{0,0,width,height})
    c_proc(glMatrixMode,{GL_PROJECTION})
    c_proc(glLoadIdentity,{})
    c_proc(gluPerspective,{45.0,width/height,0.001,100.0})
    c_proc(glMatrixMode,{GL_MODELVIEW})
    c_proc(glLoadIdentity,{})
end procedure

function InitGL()
    if not InitGLObjects() then                              -- Function For Initializing Our Object(s)
        return FALSE
    end if
    c_proc(glShadeModel,{GL_SMOOTH})                            -- Enable Smooth Shading
    c_proc(glClearColor,{0.0, 0.0, 0.0, 0.5})               -- Black Background
    c_proc(glClearDepth,{1.0})                                  -- Depth Buffer Setup
    c_proc(glClearStencil,{0})                                  -- Stencil Buffer Setup
    c_proc(glEnable,{GL_DEPTH_TEST})                            -- Enables Depth Testing
    c_proc(glDepthFunc,{GL_LEQUAL})                             -- The Type Of Depth Testing To Do
    c_proc(glHint,{GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST})  -- Really Nice Perspective Calculations

    c_proc(glLightfv,{GL_LIGHT1, GL_POSITION, LightPos})        -- Set Light1 Position
    c_proc(glLightfv,{GL_LIGHT1, GL_AMBIENT, LightAmb})         -- Set Light1 Ambience
    c_proc(glLightfv,{GL_LIGHT1, GL_DIFFUSE, LightDif})         -- Set Light1 Diffuse
    c_proc(glLightfv,{GL_LIGHT1, GL_SPECULAR, LightSpc})        -- Set Light1 Specular
    c_proc(glEnable,{GL_LIGHT1})                                -- Enable Light1
    c_proc(glEnable,{GL_LIGHTING})                              -- Enable Lighting

    c_proc(glMaterialfv,{GL_FRONT, GL_AMBIENT, MatAmb})         -- Set Material Ambience
    c_proc(glMaterialfv,{GL_FRONT, GL_DIFFUSE, MatDif})         -- Set Material Diffuse
    c_proc(glMaterialfv,{GL_FRONT, GL_SPECULAR, MatSpc})        -- Set Material Specular
    c_proc(glMaterialfv,{GL_FRONT, GL_SHININESS, MatShn})       -- Set Material Shininess

    c_proc(glCullFace,{GL_BACK})                                -- Set Culling Face To Back Face
    c_proc(glEnable,{GL_CULL_FACE})                             -- Enable Culling
    c_proc(glClearColor,{0.1, 1.0, 0.5, 1.0})               -- Set Clear Color (Greenish Color)

    q = c_func(gluNewQuadric,{})                                -- Initialize Quadratic
    c_proc(gluQuadricNormals,{q, GL_SMOOTH})                    -- Enable Smooth Normal Generation
    c_proc(gluQuadricTexture,{q, GL_FALSE})                     -- Disable Auto Texture Coords

    return TRUE                                     -- Initialization Went OK
end function

procedure DrawGLRoom()                                      -- Draw The Room (Box)

    c_proc(glBegin,{GL_QUADS})                                    -- Begin Drawing Quads
        -- Floor
        c_proc(glNormal3f,{0.0, 1.0, 0.0})                  -- Normal Pointing Up
        c_proc(glVertex3f,{-10.0,-10.0,-20.0})              -- Back Left
        c_proc(glVertex3f,{-10.0,-10.0, 20.0})          -- Front Left
        c_proc(glVertex3f,{ 10.0,-10.0, 20.0})              -- Front Right
        c_proc(glVertex3f,{10.0,-10.0,-20.0})           -- Back Right
        -- Ceiling
        c_proc(glNormal3f,{0.0,-1.0, 0.0})                  -- Normal Point Down
        c_proc(glVertex3f,{-10.0, 10.0, 20.0})              -- Front Left
        c_proc(glVertex3f,{-10.0, 10.0,-20.0})              -- Back Left
        c_proc(glVertex3f,{10.0, 10.0,-20.0})               -- Back Right
        c_proc(glVertex3f,{10.0, 10.0, 20.0})               -- Front Right
        -- Front Wall
        c_proc(glNormal3f,{0.0, 0.0, 1.0})                  -- Normal Pointing Away From Viewer
        c_proc(glVertex3f,{-10.0, 10.0,-20.0})              -- Top Left
        c_proc(glVertex3f,{-10.0,-10.0,-20.0})              -- Bottom Left
        c_proc(glVertex3f,{ 10.0,-10.0,-20.0})              -- Bottom Right
        c_proc(glVertex3f,{ 10.0, 10.0,-20.0})              -- Top Right
        -- Back Wall
        c_proc(glNormal3f,{0.0, 0.0,-1.0})                  -- Normal Pointing Towards Viewer
        c_proc(glVertex3f,{10.0, 10.0, 20.0})               -- Top Right
        c_proc(glVertex3f,{10.0,-10.0, 20.0})               -- Bottom Right
        c_proc(glVertex3f,{-10.0,-10.0, 20.0})              -- Bottom Left
        c_proc(glVertex3f,{-10.0, 10.0, 20.0})              -- Top Left
        -- Left Wall
        c_proc(glNormal3f,{1.0, 0.0, 0.0})                  -- Normal Pointing Right
        c_proc(glVertex3f,{-10.0, 10.0, 20.0})              -- Top Front
        c_proc(glVertex3f,{-10.0,-10.0, 20.0})              -- Bottom Front
        c_proc(glVertex3f,{-10.0,-10.0,-20.0})              -- Bottom Back
        c_proc(glVertex3f,{-10.0, 10.0,-20.0})              -- Top Back
        -- Right Wall
        c_proc(glNormal3f,{-1.0, 0.0, 0.0})                 -- Normal Pointing Left
        c_proc(glVertex3f,{10.0, 10.0,-20.0})               -- Top Back
        c_proc(glVertex3f,{10.0,-10.0,-20.0})               -- Bottom Back
        c_proc(glVertex3f,{10.0,-10.0, 20.0})               -- Bottom Front
        c_proc(glVertex3f,{10.0, 10.0, 20.0})               -- Top Front
    c_proc(glEnd,{})                                            -- Done Drawing Quads
end procedure

function DrawGLScene()
atom Minv,wlp, lp
Minv = allocate(64)
wlp = allocate(16)
lp = allocate(16)

    -- Clear Color Buffer, Depth Buffer, Stencil Buffer
    c_proc(glClear,{GL_COLOR_BUFFER_BIT + GL_DEPTH_BUFFER_BIT + GL_STENCIL_BUFFER_BIT})

    c_proc(glLoadIdentity,{})                                   -- Reset Modelview Matrix
    c_proc(glTranslatef,{0.0, 0.0, -20.0})                  -- Zoom Into Screen 20 Units
    c_proc(glLightfv,{GL_LIGHT1, GL_POSITION, LightPos})        -- Position Light1
    c_proc(glTranslatef,{float32_to_atom(peek({SpherePos,4})), float32_to_atom(peek({SpherePos+4,4})), float32_to_atom(peek({SpherePos+8,4}))}) -- Position The Sphere
    c_proc(gluSphere,{q, 1.5, 32, 16})                          -- Draw A Sphere

    -- calculate light's position relative to local coordinate system
    -- dunno if this is the best way to do it, but it actually works
    -- if u find another aproach, let me know )

    -- we build the inversed matrix by doing all the actions in reverse order
    -- and with reverse parameters (notice -xrot, -yrot, -ObjPos[], etc.)
    c_proc(glLoadIdentity,{})                                   -- Reset Matrix
    c_proc(glRotatef,{-yrot, 0.0, 1.0, 0.0})                    -- Rotate By -yrot On Y Axis
    c_proc(glRotatef,{-xrot, 1.0, 0.0, 0.0})                    -- Rotate By -xrot On X Axis
    c_proc(glGetFloatv,{GL_MODELVIEW_MATRIX,Minv})              -- Retrieve ModelView Matrix (Stores In Minv)
    poke(lp,peek({LightPos,4}))                             -- Store Light Position X In lp[0]
    poke(lp+4,peek({LightPos+4,4}))                             -- Store Light Position Y In lp[1]
    poke(lp+8,peek({LightPos+8,4}))                             -- Store Light Position Z In lp[2]
    poke(lp+12,peek({LightPos+12,4}))                             -- Store Light Direction In lp[3]
    VMatMult(Minv, lp)                                  -- We Store Rotated Light Vector In 'lp' Array
    -- Move Negative On All Axis Based On ObjPos[] Values (X, Y, Z)
    c_proc(glTranslatef,{-float32_to_atom(peek({ObjPos,4})), -float32_to_atom(peek({ObjPos+4,4})), -float32_to_atom(peek({ObjPos+8,4}))})
    c_proc(glGetFloatv,{GL_MODELVIEW_MATRIX,Minv})              -- Retrieve ModelView Matrix From Minv
    poke(wlp,atom_to_float32(0.0))                                      -- World Local Coord X To 0
    poke(wlp+4,atom_to_float32(0.0))                                        -- World Local Coord Y To 0
    poke(wlp+8,atom_to_float32(0.0))                                        -- World Local Coord Z To 0
    poke(wlp+12,atom_to_float32(1.0))
    VMatMult(Minv, wlp)                             -- We Store The Position Of The World Origin Relative To The Local Coord. System In 'wlp' Array

    poke(lp,atom_to_float32(float32_to_atom(peek({lp,4})) + float32_to_atom(peek({wlp,4}))))                                    -- Adding These Two Gives Us The
    poke(lp+4,atom_to_float32(float32_to_atom(peek({lp+4,4})) + float32_to_atom(peek({wlp+4,4}))))                        -- Position Of The Light Relative To
    poke(lp+8,atom_to_float32(float32_to_atom(peek({lp+8,4})) + float32_to_atom(peek({wlp+8,4}))))                        -- The Local Coordinate System

    c_proc(glColor4f,{0.7, 0.4, 0.0, 1.0})                  -- Set Color To An Orange
    c_proc(glLoadIdentity,{})                                   -- Reset Modelview Matrix
    c_proc(glTranslatef,{0.0, 0.0, -20.0})                  -- Zoom Into The Screen 20 Units
    DrawGLRoom()                                        -- Draw The Room
    c_proc(glTranslatef,{float32_to_atom(peek({ObjPos,4})), float32_to_atom(peek({ObjPos+4,4})), float32_to_atom(peek({ObjPos+8,4}))})      -- Position The Object
    c_proc(glRotatef,{xrot, 1.0, 0.0, 0.0})                 -- Spin It On The X Axis By xrot
    c_proc(glRotatef,{yrot, 0.0, 1.0, 0.0})                 -- Spin It On The Y Axis By yrot
    DrawGLObject(obj)                                  -- Procedure For Drawing The Loaded Object
    obj = CastShadow(obj, lp)                                -- Procedure For Casting The Shadow Based On The Silhouette

    c_proc(glColor4f,{0.7, 0.4, 0.0, 1.0})                  -- Set Color To Purplish Blue
    c_proc(glDisable,{GL_LIGHTING})                             -- Disable Lighting
    c_proc(glDepthMask,{GL_FALSE})                              -- Disable Depth Mask
    c_proc(glTranslatef,{float32_to_atom(peek({lp,4})), float32_to_atom(peek({lp+4,4})), float32_to_atom(peek({lp+8,4}))})         -- Translate To Light's Position
                                                        -- Notice We're Still In Local Coordinate System
    c_proc(gluSphere,{q, 0.2, 16, 8})                           -- Draw A Little Yellow Sphere (Represents Light)
    c_proc(glEnable,{GL_LIGHTING})                              -- Enable Lighting
    c_proc(glDepthMask,{GL_TRUE})                               -- Enable Depth Mask

    xrot += xspeed                                      -- Increase xrot By xspeed
    yrot += yspeed                                      -- Increase yrot By yspeed

    c_proc(glFlush,{})                                          -- Flush The OpenGL Pipeline
    return TRUE                                     -- Everything Went OK
end function

procedure ProcessKeyboard()                                 -- Process Key Presses
    -- Spin Object
    if keys[VK_LEFT] then yspeed -= 0.1 end if                 -- 'Arrow Left' Decrease yspeed
    if keys[VK_RIGHT]   then yspeed += 0.1 end if                   -- 'Arrow Right' Increase yspeed
    if keys[VK_UP]  then xspeed -= 0.1 end if                   -- 'Arrow Up' Decrease xspeed
    if keys[VK_DOWN]    then xspeed += 0.1 end if                   -- 'Arrow Down' Increase xspeed

    -- Adjust Light's Position
    if keys['L'] then                                         -- 'L' Moves Light Right
        poke(LightPos,atom_to_float32(float32_to_atom(peek({LightPos,4})) + 0.05))
    end if
    if keys['J'] then                                         -- 'J' Moves Light Left
        poke(LightPos,atom_to_float32(float32_to_atom(peek({LightPos,4})) - 0.05))
    end if
    if keys['I'] then                                         -- 'I' Moves Light Up
        poke(LightPos+4,atom_to_float32(float32_to_atom(peek({LightPos+4,4}))  + 0.05))
    end if
    if keys['K'] then                                        -- 'K' Moves Light Down
        poke(LightPos+4,atom_to_float32(float32_to_atom(peek({LightPos+4,4}))  - 0.05))
    end if
    if keys['O'] then                                        -- 'O' Moves Light Toward Viewer
        poke(LightPos+8,atom_to_float32(float32_to_atom(peek({LightPos+8,4})) + 0.05))
    end if
    if keys['U'] then                                         -- 'U' Moves Light Away From Viewer
        poke(LightPos+8,atom_to_float32(float32_to_atom(peek({LightPos+8,4})) - 0.05))
    end if

    -- Adjust Object's Position
    if keys[VK_NUMPAD6] then                         -- 'Numpad6' Move Object Right
        poke(ObjPos,atom_to_float32(float32_to_atom(peek({ObjPos,4})) + 0.05))
    end if
    if keys[VK_NUMPAD4] then                         -- 'Numpad4' Move Object Left
        poke(ObjPos,atom_to_float32(float32_to_atom(peek({ObjPos,4})) - 0.05))
    end if
    if keys[VK_NUMPAD8] then                         -- 'Numpad8' Move Object Up
        poke(ObjPos+4,atom_to_float32(float32_to_atom(peek({ObjPos+4,4})) + 0.05))
    end if
    if keys[VK_NUMPAD5] then                         -- 'Numpad5' Move Object Down
        poke(ObjPos+4,atom_to_float32(float32_to_atom(peek({ObjPos+4,4})) - 0.05))
    end if
    if keys[VK_NUMPAD9] then                         -- 'Numpad9' Move Object Toward Viewer
        poke(ObjPos+8,atom_to_float32(float32_to_atom(peek({ObjPos+8,4})) + 0.05))
    end if
    if keys[VK_NUMPAD7] then                         -- 'Numpad7' Move Object Away From Viewer
        poke(ObjPos+8,atom_to_float32(float32_to_atom(peek({ObjPos+8,4})) - 0.05))
    end if

    -- Adjust Ball's Position
    if keys['D'] then                                         -- 'D' Move Ball Right
        poke(SpherePos,atom_to_float32(float32_to_atom(peek({SpherePos,4})) + 0.05))
    end if
    if keys['A'] then                                         -- 'A' Move Ball Left
        poke(SpherePos,atom_to_float32(float32_to_atom(peek({SpherePos,4})) - 0.05))
    end if
    if keys['W'] then                                        -- 'W' Move Ball Up
        poke(SpherePos+4,atom_to_float32(float32_to_atom(peek({SpherePos+4,4})) + 0.05))
    end if
    if keys['S'] then                                         -- 'S' Move Ball Down
        poke(SpherePos+4,atom_to_float32(float32_to_atom(peek({SpherePos+4,4})) - 0.0))
    end if
    if keys['E'] then                                         -- 'E' Move Ball Toward Viewer
        poke(SpherePos+8,atom_to_float32(float32_to_atom(peek({SpherePos+8,4})) + 0.05))
    end if
    if keys['Q'] then                                         -- 'Q' Move Ball Away From Viewer
        poke(SpherePos+8,atom_to_float32(float32_to_atom(peek({SpherePos+8,4})) - 0.05))
    end if
end procedure

integer dmScreenSettings, WindowRect

procedure KillGLWindow()
    if fullscreen then
        if c_func(ChangeDisplaySettingsA,{NULL,0}) then end if
        if c_func(ShowCursor,{TRUE}) then end if
    end if
    if hRC then
        if c_func(wglMakeCurrent,{NULL,NULL}) then end if
        if c_func(wglDeleteContext,{hRC}) then end if
        hRC = NULL
    end if
    if hRC and not c_func(ReleaseDC,{hWnd,hDC}) then
        hDC = NULL
    end if
    if hWnd and not c_func(DestroyWindow,{hWnd}) then
        hWnd = NULL
    end if
    if dmScreenSettings then
        free(dmScreenSettings)
    end if
    free(WindowRect)
end procedure

function WndProc(atom hWnd, integer uMsg, atom wParam, atom lParam)
    if uMsg = WM_ACTIVATE then
        if not floor(wParam/#10000) then
            active = TRUE
        else
            active = FALSE
        end if
    elsif  uMsg = WM_SYSCOMMAND then
        if wParam = SC_SCREENSAVE then end if
        if wParam = SC_MONITORPOWER then end if
    elsif uMsg = WM_CLOSE then
        c_proc(PostQuitMessage,{0})
    elsif uMsg = WM_KEYDOWN then
        keys[wParam] = TRUE
    elsif uMsg = WM_KEYUP then
        keys[wParam] = FALSE
    elsif uMsg = WM_SIZE then
        ReSizeGLScene(and_bits(lParam,#FFFF),floor(lParam/#10000))
    end if
    return c_func(DefWindowProcA,{hWnd, uMsg, wParam, lParam})
end function

integer wc wc = allocate(40)
function ClassRegistration()
integer WndProcAddress, id
    id = routine_id("WndProc")
    if id = -1 then
    puts(1, "routine_id failed!\n")
    abort(1)
    end if
    WndProcAddress = call_back(id)
    hInstance = c_func(GetModuleHandle,{NULL})
    ClassName = allocate_string("OpenGL")
    poke4(wc,or_all({CS_HREDRAW, CS_VREDRAW, CS_OWNDC}))
    poke4(wc+4,WndProcAddress)
    poke4(wc+8,0)
    poke4(wc+12,0)
    poke4(wc+16,hInstance)
    poke4(wc+20,c_func(LoadIconA,{NULL,IDI_WINLOGO}))
    poke4(wc+24,c_func(LoadCursorA,{NULL, IDC_ARROW}))
    poke4(wc+28,NULL)
    poke4(wc+32,NULL)
    poke4(wc+36,ClassName)
    if not c_func(RegisterClassA,{wc}) then
        retval = message_box("Failed to register class","Error", or_bits(MB_OK,MB_ICONINFORMATION))
        return FALSE
    else
        return TRUE
    end if
end function

integer regd regd = FALSE
procedure CreateGLWindow(atom title, integer width, integer height, integer bits, integer fullscreenflag)
    atom PixelFormat, pfd, dwExStyle, dwStyle

    fullscreen = fullscreenflag
    if fullscreen then
        dmScreenSettings = allocate(148)
        mem_set(dmScreenSettings,0,148)
        poke4(dmScreenSettings + 36,148)
        poke4(dmScreenSettings + 40,or_all({DM_BITSPERPEL,DM_PELSWIDTH,DM_PELSHEIGHT}))
        poke4(dmScreenSettings + 104, bits)
        poke4(dmScreenSettings + 108, width)
        poke4(dmScreenSettings + 112, height)

        if c_func(ChangeDisplaySettingsA,{dmScreenSettings,CDS_FULLSCREEN}) != DISP_CHANGE_SUCCESSFUL then
            if message_box("The requested fullscreen mode is not supported by\nyour video card. " &
                           "Use windowed mode instead?","Error", or_bits(MB_YESNO,MB_ICONEXCLAMATION)) = IDYES then
            else
                retval = message_box("Program will now close","Error",or_bits(MB_OK,MB_ICONSTOP))
            end if
        end if
    else
        dmScreenSettings = NULL
    end if
    if fullscreen then
        dwExStyle = WS_EX_APPWINDOW
        dwStyle = WS_POPUP
        if c_func(ShowCursor,{FALSE}) then end if
    else
        dwExStyle = or_bits(WS_EX_APPWINDOW,WS_EX_WINDOWEDGE)
        dwStyle = WS_OVERLAPPEDWINDOW
    end if
    WindowRect = allocate(16)
    poke4(WindowRect,0)
    poke4(WindowRect + 4,width)
    poke4(WindowRect + 8, 0)
    poke4(WindowRect + 12, height)
    if c_func(AdjustWindowRectEx,{WindowRect, dwStyle, FALSE, dwExStyle}) then end if
    hWnd = c_func(CreateWindowExA,{dwExStyle,  --extended window style
                                   ClassName,  --class
                                   title,      --window caption
                                   or_all({WS_CLIPSIBLINGS,WS_CLIPCHILDREN,dwStyle}),  --window style
                                   0,
                                   0,
                                   peek4u(WindowRect + 4) - peek4u(WindowRect),
                                   peek4u(WindowRect + 12) - peek4u(WindowRect + 8),
                                   NULL,
                                   NULL,
                                   hInstance,
                                   NULL})
    if hWnd = NULL then
        KillGLWindow()
        retval = message_box("Window creation error","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    pfd = allocate(40)  --PIXELFORMATDESCRIPTOR
    mem_set(pfd,0,40)
    poke(pfd, 40)  --size of pfd structure
    poke(pfd + 2, 1) --version
    poke4(pfd + 4, or_all({PFD_DRAW_TO_WINDOW,PFD_SUPPORT_OPENGL,PFD_DOUBLEBUFFER})) --properties flags
    poke(pfd + 8, PFD_TYPE_RGBA)  --request an rgba format
    poke(pfd + 9, 24)  --select color depth
    poke(pfd + 23, 24)  --32bit Z-buffer

    hDC = c_func(GetDC,{hWnd})  --create GL device context to match window device context
    if not hDC then
        KillGLWindow()
        retval = message_box("Can't create a GL device context","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    PixelFormat = c_func(ChoosePixelFormat,{hDC,pfd})  --find a pixel format matching PIXELFORMATDESCRIPTOR
    if not PixelFormat then
        KillGLWindow()
        retval = message_box("Can't find a suitable pixel format","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    if not (c_func(SetPixelFormat,{hDC,PixelFormat,pfd})) then  --set the pixel format
        KillGLWindow()
        retval = message_box("Can't set the pixel format","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    if not c_func(DescribePixelFormat, {hDC,PixelFormat,40,pfd}) then
        retval = message_box("Can't describe the pixel format","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    hRC = c_func(wglCreateContext,{hDC})  --create GL rendering context
    if not hRC then
        KillGLWindow()
        retval = message_box("Can't create a GL rendering context","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    if not (c_func(wglMakeCurrent,{hDC,hRC})) then  --make the GL rendering context active
        KillGLWindow()
        retval = message_box("Can't activate the GL rendering context","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    retval = c_func(ShowWindow,{hWnd,SW_SHOW}) --show the window
    retval = c_func(SetForegroundWindow,{hWnd}) --set it to always be in foreground
    retval = c_func(SetFocus,{hWnd}) --give it focus
    ReSizeGLScene(width, height)  --draw the GL scene to match the window size
    retval = InitGL()  --initialize OpenGL
end procedure

integer MSG MSG = allocate(28)
integer title title = allocate_string("OpenGL")
procedure WinMain()
integer done, msg_message

    retval = ClassRegistration()
    done = FALSE
    if message_box("Would you like to run in fullscreen mode?","Start Fullscreen?",or_bits(MB_YESNO,MB_ICONQUESTION)) = IDNO then
        fullscreen = FALSE
    end if
    CreateGLWindow(title,640,480,24,fullscreen)
    while not done do
        if c_func(PeekMessageA,{MSG,NULL,0,0,PM_REMOVE}) then
            msg_message = peek4u(MSG+4)
            if msg_message = WM_QUIT then
                done = TRUE
            else
                retval = c_func(TranslateMessage,{MSG})
                retval = c_func(DispatchMessageA,{MSG})
            end if
        else
            if (active and  keys[VK_ESCAPE]) then
                done = TRUE
            else
                retval = DrawGLScene()
                retval = c_func(SwapBuffers,{hDC})
                ProcessKeyboard()
            end if
        end if
    end while
    KillGLWindow()
end procedure

WinMain()