include get.e
include dll.e
include machine.e
include msgbox.e
include constants.ew
include GLfunc.ew
include GLconst.ew

without warning

atom hRC, hDC, hWnd, hInstance, ClassName
sequence keys keys = repeat(0,256)  -- array to hold key presses

constant MAX_PARTICLES = 1000

integer active, fullscreen, retval
active = TRUE
fullscreen = TRUE
hRC = NULL
hDC = NULL
hWnd = NULL
hInstance = NULL

integer rainbow, rp, sp, col, delay
rainbow = TRUE
col = 1
delay = 0
atom slowdown, xspeed, yspeed, zoom
slowdown = 2.0
xspeed = 0.0
yspeed = 0.0
zoom = -40.0

sequence particles, Particles
particles = {0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
integer pactive, life, fade, r, g, b, x, y, z, xi, yi, zi, xg, yg, zg
pactive = 1 life = 2 fade = 3 r = 4 g = 5 b = 6 x = 7 y = 8 z = 9 xi = 10
yi = 11 zi = 12 xg = 13 yg = 14 zg = 15

Particles = repeat(particles, MAX_PARTICLES)

atom texture
texture = allocate(4)

sequence colors
colors = {{1.0,0.5,0.5},{1.0,0.75,0.5},{1.0,1.0,0.5},{0.75,1.0,0.5},
          {0.5,1.0,0.5},{0.5,1.0,0.75},{0.5,1.0,1.0},{0.5,0.75,1.0},
          {0.5,0.5,1.0},{0.75,0.5,1.0},{1.0,0.5,1.0},{1.0,0.5,0.75}}

function LoadBMP(sequence Filename)
integer File
atom filename
    filename = allocate_string(Filename)
    File = NULL
    if atom(Filename) then
        return NULL
    end if
    File = open(Filename,"r")
    if File then
        close(File)
        return c_func(auxDIBImageLoad, {filename})
    end if
    return NULL
end function

function LoadGLTextures()
atom TextureImage
integer Status
    Status = FALSE
    TextureImage = LoadBMP("Data\\Particle.bmp")
    if TextureImage then
        Status = TRUE
        c_proc(glGenTextures, {1,texture})
        c_proc(glBindTexture, {GL_TEXTURE_2D,peek4u(texture)})
        c_proc(glTexImage2D, {GL_TEXTURE_2D,0,3,peek4u(TextureImage),peek4u(TextureImage + 4),0,GL_RGB,
                              GL_UNSIGNED_BYTE,peek4u(TextureImage+8)})
        c_proc(glTexParameteri, {GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR})
        c_proc(glTexParameteri, {GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR})
    end if
    if peek4u(TextureImage) then
        if peek4u(TextureImage + 8) then
            free(peek4u(TextureImage+8))
        end if
        free(peek4u(TextureImage))
    end if
    return Status
end function

procedure ReSizeGLScene(integer width, integer height)
    if height = 0 then
        height = 1
    end if
    c_proc(glViewport,{0,0,width,height})
    c_proc(glMatrixMode,{GL_PROJECTION})
    c_proc(glLoadIdentity,{})
    c_proc(gluPerspective,{45.0,width/height,0.1,100.0})
    c_proc(glMatrixMode,{GL_MODELVIEW})
    c_proc(glLoadIdentity,{})
end procedure

procedure InitGL()
    if not LoadGLTextures() then
        puts(1,"LoadGLTextures failed!" & '\n')
    end if
    c_proc(glShadeModel,{GL_SMOOTH})
    c_proc(glClearColor,{0.0,0.0,0.0,0.0})
    c_proc(glClearDepth,{1.0})
    c_proc(glDisable,{GL_DEPTH_TEST})
    c_proc(glEnable,{GL_BLEND})
    c_proc(glBlendFunc,{GL_SRC_ALPHA,GL_ONE})
    c_proc(glHint,{GL_PERSPECTIVE_CORRECTION_HINT,GL_NICEST})
    c_proc(glHint,{GL_POINT_SMOOTH_HINT,GL_NICEST})
    c_proc(glEnable,{GL_TEXTURE_2D})
    c_proc(glBindTexture,{GL_TEXTURE_2D,peek4u(texture)})

    for loop = 1 to MAX_PARTICLES do
        Particles[loop][pactive] = TRUE
        Particles[loop][life] = 1.0
        Particles[loop][fade] = rand(100)/1000.0 + 0.003
        Particles[loop][r] = colors[floor(loop*(11/MAX_PARTICLES))+1][1]
        Particles[loop][g] = colors[floor(loop*(11/MAX_PARTICLES))+1][2]
        Particles[loop][b] = colors[floor(loop*(11/MAX_PARTICLES))+1][3]
        Particles[loop][xi] = (rand(50) - 26.0) * 10.0
        Particles[loop][yi] = (rand(50) - 25.0) * 10.0
        Particles[loop][zi] = (rand(50) - 25.0) * 10.0
        Particles[loop][xg] = 0.0
        Particles[loop][yg] = -0.8
        Particles[loop][zg] = 0.0
    end for
end procedure

function DrawGLScene()
atom new_x, new_y, new_z
    c_proc(glClear, {or_bits(GL_COLOR_BUFFER_BIT,GL_DEPTH_BUFFER_BIT)})
    c_proc(glLoadIdentity, {})

    for loop = 1 to MAX_PARTICLES do
        if Particles[loop][pactive] then
            new_x = Particles[loop][x]
            new_y = Particles[loop][y]
            new_z = Particles[loop][z] + zoom

            c_proc(glColor4f,{Particles[loop][r],Particles[loop][g],Particles[loop][b],Particles[loop][life]})

            c_proc(glBegin,{GL_TRIANGLE_STRIP})
                c_proc(glTexCoord2d,{1,1})  c_proc(glVertex3f,{new_x+0.5,new_y+0.5,new_z})
                c_proc(glTexCoord2d,{0,1})  c_proc(glVertex3f,{new_x-0.5,new_y+0.5,new_z})
                c_proc(glTexCoord2d,{1,0})  c_proc(glVertex3f,{new_x+0.5,new_y-0.5,new_z})
                c_proc(glTexCoord2d,{0,0})  c_proc(glVertex3f,{new_x-0.5,new_y-0.5,new_z})
            c_proc(glEnd,{})

            Particles[loop][x]+=Particles[loop][xi]/(slowdown*1000)
            Particles[loop][y]+=Particles[loop][yi]/(slowdown*1000)
            Particles[loop][z]+=Particles[loop][zi]/(slowdown*1000)

            Particles[loop][xi]+=Particles[loop][xg]
            Particles[loop][yi]+=Particles[loop][yg]
            Particles[loop][zi]+=Particles[loop][zg]
            Particles[loop][life]-=Particles[loop][fade]

            if Particles[loop][life]<0.0 then
                Particles[loop][life]=1.0
                Particles[loop][fade]=rand(100)/1000.0+0.003
                Particles[loop][x]=0.0
                Particles[loop][y]=0.0
                Particles[loop][z]=0.0
                Particles[loop][xi]=xspeed+rand(60)-32.0
                Particles[loop][yi]=yspeed+rand(60)-30.0
                Particles[loop][zi]=rand(60)-30.0
                Particles[loop][r]=colors[col][1]
                Particles[loop][g]=colors[col][2]
                Particles[loop][b]=colors[col][3]
            end if

            if keys[VK_NUMPAD8] and Particles[loop][yg]<1.5 then
                Particles[loop][yg]+=0.01
            end if
            if keys[VK_NUMPAD2] and Particles[loop][yg]>-1.5 then
                Particles[loop][yg]-=0.01
            end if
            if keys[VK_NUMPAD6] and Particles[loop][xg]<1.5 then
                Particles[loop][xg]+=0.01
            end if
            if keys[VK_NUMPAD4] and Particles[loop][xg]>-1.5 then
                Particles[loop][xg]-=0.01
            end if

            if keys[VK_TAB] then
                Particles[loop][x]=0.0
                Particles[loop][y]=0.0
                Particles[loop][z]=0.0
                Particles[loop][xi]=(rand(50)-26.0)*10.0
                Particles[loop][yi]=(rand(50)-25.0)*10.0
                Particles[loop][zi]=(rand(50)-25.0)*10.0
            end if
        end if
    end for
    return TRUE
end function

integer dmScreenSettings, WindowRect

procedure KillGLWindow()
    if fullscreen then
        if c_func(ChangeDisplaySettingsA,{NULL,0}) then end if
        if c_func(ShowCursor,{TRUE}) then end if
    end if
    if hRC then
        if c_func(wglMakeCurrent,{NULL,NULL}) then end if
        if c_func(wglDeleteContext,{hRC}) then end if
        hRC = NULL
    end if
    if hRC and not c_func(ReleaseDC,{hWnd,hDC}) then
        hDC = NULL
    end if
    if hWnd and not c_func(DestroyWindow,{hWnd}) then
        hWnd = NULL
    end if
    if dmScreenSettings then
        free(dmScreenSettings)
    end if
    free(WindowRect)
end procedure

function WndProc(atom hWnd, integer uMsg, atom wParam, atom lParam)
    if uMsg = WM_ACTIVATE then
        if not floor(wParam/#10000) then
            active = TRUE
        else
            active = FALSE
        end if
    elsif  uMsg = WM_SYSCOMMAND then
        if wParam = SC_SCREENSAVE then end if
        if wParam = SC_MONITORPOWER then end if
    elsif uMsg = WM_CLOSE then
        c_proc(PostQuitMessage,{0})
    elsif uMsg = WM_KEYDOWN then
        keys[wParam] = TRUE
    elsif uMsg = WM_KEYUP then
        keys[wParam] = FALSE
    elsif uMsg = WM_SIZE then
        ReSizeGLScene(and_bits(lParam,#FFFF),floor(lParam/#10000))
    end if
    return c_func(DefWindowProcA,{hWnd, uMsg, wParam, lParam})
end function

integer wc wc = allocate(40)
function ClassRegistration()
integer WndProcAddress, id
    id = routine_id("WndProc")
    if id = -1 then
    puts(1, "routine_id failed!\n")
    abort(1)
    end if
    WndProcAddress = call_back(id)
    hInstance = c_func(GetModuleHandleA,{NULL})
    ClassName = allocate_string("OpenGL")
    poke4(wc,or_all({CS_HREDRAW, CS_VREDRAW, CS_OWNDC}))
    poke4(wc+4,WndProcAddress)
    poke4(wc+8,0)
    poke4(wc+12,0)
    poke4(wc+16,hInstance)
    poke4(wc+20,c_func(LoadIconA,{NULL,IDI_WINLOGO}))
    poke4(wc+24,c_func(LoadCursorA,{NULL, IDC_ARROW}))
    poke4(wc+28,NULL)
    poke4(wc+32,NULL)
    poke4(wc+36,ClassName)
    if not c_func(RegisterClassA,{wc}) then
        retval = message_box("Failed to register class","Error", or_bits(MB_OK,MB_ICONINFORMATION))
        return FALSE
    else
        return TRUE
    end if
end function

integer regd regd = FALSE
procedure CreateGLWindow(atom title, integer width, integer height, integer bits, integer fullscreenflag)
    atom PixelFormat, pfd, dwExStyle, dwStyle
    sequence s
    if regd = FALSE then
        if ClassRegistration() then
            regd = TRUE
        end if
    end if
    fullscreen = fullscreenflag
    if fullscreen then
        dmScreenSettings = allocate(156)
        mem_set(dmScreenSettings,0,156)
        s = int_to_bytes(156)
        poke(dmScreenSettings + 36,{s[1],s[2]})
        poke4(dmScreenSettings + 40,or_all({DM_BITSPERPEL,DM_PELSWIDTH,DM_PELSHEIGHT}))
        poke4(dmScreenSettings + 104, bits)
        poke4(dmScreenSettings + 108, width)
        poke4(dmScreenSettings + 112, height)
        if c_func(ChangeDisplaySettingsA,{dmScreenSettings,CDS_FULLSCREEN}) != DISP_CHANGE_SUCCESSFUL then
            if message_box("The requested fullscreen mode is not supported by\nyour video card. " &
                           "Use windowed mode instead?","Error", or_bits(MB_YESNO,MB_ICONEXCLAMATION)) = IDYES then
            else
                retval = message_box("Program will now close","Error",or_bits(MB_OK,MB_ICONSTOP))
            end if
        end if
    else
        dmScreenSettings = NULL
    end if
    if fullscreen then
        dwExStyle = WS_EX_APPWINDOW
        dwStyle = WS_POPUP
        if c_func(ShowCursor,{FALSE}) then end if
    else
        dwExStyle = or_bits(WS_EX_APPWINDOW,WS_EX_WINDOWEDGE)
        dwStyle = WS_OVERLAPPEDWINDOW
    end if
    WindowRect = allocate(16)
    poke4(WindowRect,0)
    poke4(WindowRect + 4,width)
    poke4(WindowRect + 8, 0)
    poke4(WindowRect + 12, height)
    if c_func(AdjustWindowRectEx,{WindowRect, dwStyle, FALSE, dwExStyle}) then end if
    hWnd = c_func(CreateWindowExA,{dwExStyle,  --extended window style
                                   ClassName,  --class
                                   title,      --window caption
                                   or_all({WS_CLIPSIBLINGS,WS_CLIPCHILDREN,dwStyle}),  --window style
                                   0,
                                   0,
                                   peek4u(WindowRect + 4) - peek4u(WindowRect),
                                   peek4u(WindowRect + 12) - peek4u(WindowRect + 8),
                                   NULL,
                                   NULL,
                                   hInstance,
                                   NULL})
    if hWnd = NULL then
        KillGLWindow()
        retval = message_box("Window creation error","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    pfd = allocate(40)  --PIXELFORMATDESCRIPTOR
    mem_set(pfd,0,40)
    poke(pfd, 40)  --size of pfd structure
    poke(pfd + 2, 1) --version
    poke4(pfd + 4, or_all({PFD_DRAW_TO_WINDOW,PFD_SUPPORT_OPENGL,PFD_DOUBLEBUFFER})) --properties flags
    poke(pfd + 8, PFD_TYPE_RGBA)  --request an rgba format
    poke(pfd + 9, 24)  --select color depth
    poke(pfd + 23, 24)  --32bit Z-buffer

    hDC = c_func(GetDC,{hWnd})  --create GL device context to match window device context
    if not hDC then
        KillGLWindow()
        retval = message_box("Can't create a GL device context","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    PixelFormat = c_func(ChoosePixelFormat,{hDC,pfd})  --find a pixel format matching PIXELFORMATDESCRIPTOR
    if not PixelFormat then
        KillGLWindow()
        retval = message_box("Can't find a suitable pixel format","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    if not (c_func(SetPixelFormat,{hDC,PixelFormat,pfd})) then  --set the pixel format
        KillGLWindow()
        retval = message_box("Can't set the pixel format","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    if not c_func(DescribePixelFormat, {hDC,PixelFormat,40,pfd}) then
        retval = message_box("Can't describe the pixel format","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    hRC = c_func(wglCreateContext,{hDC})  --create GL rendering context
    if not hRC then
        KillGLWindow()
        retval = message_box("Can't create a GL rendering context","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    if not (c_func(wglMakeCurrent,{hDC,hRC})) then  --make the GL rendering context active
        KillGLWindow()
        retval = message_box("Can't activate the GL rendering context","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    retval = c_func(ShowWindow,{hWnd,SW_SHOW}) --show the window
    retval = c_func(SetForegroundWindow,{hWnd}) --set it to always be in foreground
    retval = c_func(SetFocus,{hWnd}) --give it focus
    ReSizeGLScene(width, height)  --draw the GL scene to match the window size
    InitGL()  --initialize OpenGL
end procedure

integer MSG MSG = allocate(28)
integer title title = allocate_string("NeHe's Textures, Lighting and Keyboard Tutorial")
procedure WinMain()
integer done, msg_message
    done = FALSE
    if message_box("Would you like to run in fullscreen mode?","Start Fullscreen?",or_bits(MB_YESNO,MB_ICONQUESTION)) = IDNO then
        fullscreen = FALSE
    else
        fullscreen = TRUE
    end if
    CreateGLWindow(title,640,480,24,fullscreen)
    while not done do
        if c_func(PeekMessageA,{MSG,NULL,0,0,PM_REMOVE}) then
            msg_message = peek4u(MSG+4)
            if msg_message = WM_QUIT then
                done = TRUE
            else
                retval = c_func(TranslateMessage,{MSG})
                retval = c_func(DispatchMessageA,{MSG})
            end if
        else
            if ((active and not DrawGLScene()) or keys[VK_ESCAPE]) then
                done = TRUE
            else
                retval = c_func(SwapBuffers,{hDC})
                if keys[VK_ADD] and slowdown > 1.0 then
                    slowdown -= 0.01
                end if
                if keys[VK_SUBTRACT] and slowdown < 4.0 then
                    slowdown += 0.01
                end if
                if keys[VK_RETURN] and not rp then
                    rp = TRUE
                    if rainbow then
                        rainbow = 0
                    else
                        rainbow = 1
                    end if
                end if
                if not keys[VK_RETURN] then
                    rp = FALSE
                end if
                if keys[VK_NEXT] then
                    zoom -= 0.01
                end if
                if keys[VK_PRIOR] then
                    zoom -= 0.01
                end if
                if (keys[' '] and not sp) or (delay > 25) then
                    if keys[' '] then
                        rainbow = FALSE
                    end if
                    sp = TRUE
                    delay = 0
                    col += 1
                    if col > 12 then
                        col = 1
                    end if
                end if
                if not keys[' '] then
                    sp = FALSE
                end if
                if keys[VK_UP] and yspeed < 200 then
                    yspeed += 0.01
                end if
                if keys[VK_DOWN] and yspeed > -200 then
                    yspeed -= 0.01
                end if
                if keys[VK_RIGHT] and xspeed < 200 then
                    xspeed += 0.01
                end if
                if keys[VK_LEFT] and xspeed > -200 then
                    xspeed -= 0.01
                end if
                delay += 1
                if keys[VK_F1] then
                    keys[VK_F1] = FALSE
                    KillGLWindow()
                    if fullscreen = 0 then
                        fullscreen = 1
                    else
                        fullscreen = 0
                    end if
                    CreateGLWindow(title,640,480,24,fullscreen)
                end if
            end if
        end if
    end while
    KillGLWindow()
end procedure

WinMain()