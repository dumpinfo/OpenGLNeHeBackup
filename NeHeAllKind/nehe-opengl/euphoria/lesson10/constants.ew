include dll.e
include machine.e

global constant TRUE = 1, FALSE = 0
global constant WM_ACTIVATE = #0006, WM_SYSCOMMAND = #0112, SC_SCREENSAVE = #F140, SC_MONITORPOWER = #F170,
         WM_CLOSE = #0010, WM_KEYDOWN = #0100, WM_KEYUP = #0101, WM_SIZE = #0005, CS_HREDRAW = #0002, CS_VREDRAW = #0001,
         CS_OWNDC = #0020, IDI_WINLOGO = 32517, IDC_ARROW = 32512, DM_BITSPERPEL = #00040000, DM_PELSWIDTH = #00080000,
         DM_PELSHEIGHT = #00100000, CDS_FULLSCREEN = #00000004, DISP_CHANGE_SUCCESSFUL = 0, WS_EX_APPWINDOW = #00040000,
         WS_POPUP = #80000000, WS_EX_WINDOWEDGE = #00000100, WS_CLIPSIBLINGS = #04000000,
         WS_OVERLAPPED = #00000000,WS_CAPTION = #00C00000, WS_SYSMENU = #00080000, WS_THICKFRAME = #00040000,
         WS_MINIMIZEBOX = #00020000, WS_MAXIMIZEBOX = #00010000, WS_CLIPCHILDREN = #02000000,
         PFD_DRAW_TO_WINDOW = #00000004, PFD_SUPPORT_OPENGL = #00000020, PFD_DOUBLEBUFFER = #00000001,
         PFD_TYPE_RGBA = 0, SW_SHOW = 5, WS_OVERLAPPEDWINDOW = #00CF0000, PM_REMOVE = #0001, WM_QUIT = #0012,
         VK_ESCAPE = #1B, VK_F1 = #70, VK_PRIOR = #21, VK_UP = #26, VK_DOWN = #28,  VK_RIGHT = #27, VK_LEFT = #25,
         VK_NEXT = #22, EOF = -1


procedure not_found(sequence name)
    puts(1,'\n' & "Couldn't find " & name & '\n')
    while get_key() != 'n' do end while
    abort(1)
end procedure

global function or_all(sequence s)
-- or together all elements of a sequence
    atom result

    result = 0
    for i = 1 to length(s) do
    result = or_bits(result, s[i])
    end for
    return result
end function

function link_c_func(atom dll, sequence name, sequence args, atom result)
-- dynamically link a C routine as a phoria function
    integer handle

    handle = define_c_func(dll, name, args, result)
    if handle = -1 then
    not_found(name)
    else
    return handle
    end if
end function

function link_c_proc(atom dll, sequence name, sequence args)
-- dynamically link a C routine as a phoria function
    integer handle

    handle = define_c_proc(dll, name, args)
    if handle = -1 then
    not_found(name)
    else
    return handle
    end if
end function

global integer ChangeDisplaySettingsA, ShowCursor, ReleaseDC, UnregisterClassA, GetModuleHandleA, LoadIconA,
        LoadCursorA, RegisterClassA, AdjustWindowRectEx, CreateWindowExA, DestroyWindow, GetDC,
        ChoosePixelFormat, LoadBitmap, SetPixelFormat, DescribePixelFormat, ShowWindow, SetForegroundWindow,
        SetFocus, PostQuitMessage, DefWindowProcA, PeekMessageA, TranslateMessage, DispatchMessageA,
        GetLastError, FormatMessage, SwapBuffers

procedure link_dll_routines()
    atom kernel32, user32, gdi32

    kernel32 = open_dll("kernel32.dll")
    if kernel32 = NULL then
        not_found("kernel32.dll")
    end if

    user32 = open_dll("user32.dll")
    if user32 = NULL then
        not_found("user32.dll")
    end if

    gdi32 = open_dll("gdi32.dll")
    if gdi32 = NULL then
        not_found("gdi32.dll")
    end if

    ChangeDisplaySettingsA = link_c_func(user32, "ChangeDisplaySettingsA", {C_POINTER,C_DOUBLE}, C_LONG)
    ShowCursor = link_c_func(user32, "ShowCursor", {C_INT}, C_INT)
    ReleaseDC = link_c_func(user32, "ReleaseDC", {C_POINTER,C_POINTER}, C_INT)
    UnregisterClassA = link_c_func(user32, "UnregisterClassA", {C_POINTER,C_POINTER}, C_LONG)
    GetModuleHandleA = link_c_func(kernel32, "GetModuleHandleA", {C_POINTER}, C_INT)
    LoadIconA = link_c_func(user32, "LoadIconA", {C_POINTER,C_POINTER}, C_INT)
    LoadCursorA = link_c_func(user32, "LoadCursorA", {C_POINTER,C_POINTER}, C_INT)
    RegisterClassA = link_c_func(user32, "RegisterClassA", {C_POINTER}, C_POINTER)
    AdjustWindowRectEx = link_c_func(user32, "AdjustWindowRectEx", {C_POINTER,C_DOUBLE,C_INT,C_DOUBLE}, C_INT)
    CreateWindowExA = link_c_func(user32, "CreateWindowExA", {C_INT,C_POINTER,C_POINTER,C_INT,C_INT,C_INT,
                                                              C_INT,C_INT,C_POINTER,C_POINTER,C_POINTER,C_POINTER}, C_INT)
    DestroyWindow = link_c_func(user32, "DestroyWindow", {C_POINTER}, C_LONG)
    GetDC = link_c_func(user32, "GetDC", {C_POINTER}, C_INT)
    ChoosePixelFormat = link_c_func(gdi32, "ChoosePixelFormat", {C_POINTER,C_POINTER}, C_INT)
    SetPixelFormat = link_c_func(gdi32, "SetPixelFormat", {C_POINTER, C_INT, C_POINTER}, C_INT)
    DescribePixelFormat = link_c_func(gdi32, "DescribePixelFormat", {C_POINTER, C_INT, C_UINT, C_POINTER}, C_INT)
    ShowWindow = link_c_func(user32, "ShowWindow", {C_POINTER, C_INT}, C_INT)
    SetForegroundWindow = link_c_func(user32, "SetForegroundWindow", {C_POINTER}, C_INT)
    SetFocus = link_c_func(user32, "SetFocus", {C_POINTER}, C_INT)
    PostQuitMessage = link_c_proc(user32, "PostQuitMessage", {C_INT})
    DefWindowProcA = link_c_func(user32, "DefWindowProcA", {C_POINTER,C_INT,C_INT,C_INT}, C_INT)
    PeekMessageA = link_c_func(user32, "PeekMessageA", {C_POINTER,C_POINTER,C_UINT,C_UINT,C_UINT},C_INT)
    TranslateMessage = link_c_func(user32, "TranslateMessage", {C_POINTER}, C_INT)
    DispatchMessageA = link_c_func(user32, "DispatchMessageA", {C_POINTER}, C_INT)
    GetLastError = link_c_func(kernel32, "GetLastError", {}, C_INT)
    FormatMessage = link_c_func(kernel32, "FormatMessageA",{C_INT,C_POINTER,C_INT,C_INT,C_POINTER,C_INT,C_POINTER},C_INT)
    SwapBuffers = link_c_func(gdi32, "SwapBuffers", {C_INT}, C_INT)

end procedure
link_dll_routines()
