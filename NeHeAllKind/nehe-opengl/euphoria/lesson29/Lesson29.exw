include get.e
include dll.e
include machine.e
include msgbox.e
include constants.ew
include GLfunc.ew
include GLconst.ew

without warning
with trace

atom hRC, hDC, hWnd, hInstance, ClassName
sequence keys keys = repeat(0,256)  -- array to hold key presses

integer active, fullscreen, retval
active = TRUE
fullscreen = TRUE
hRC = NULL
hDC = NULL
hWnd = NULL
hInstance = NULL

atom xrot, yrot, zrot
xrot = 0.0
yrot = 0.0
zrot = 0.0

atom texture, t1, t2
texture = allocate(4)
t1 = allocate(16)
t2 = allocate(16)

integer width, height, format, data
width = 0
height = 4
format = 8
data = 12

function AllocateTextureBuffer(integer w, integer h, integer f)
atom ti

    ti = allocate(16)                          -- Image Struct

    poke4(ti+width, w)                                  -- Set Width
    poke4(ti+height, h)                                 -- Set Height
    poke4(ti+format, f)                                 -- Set Format
    poke4(ti+data, allocate(w*h*f))

    return ti                                           -- Return Pointer To Image Struct
end function

procedure DeallocateTexture(atom t)
    if peek4u(t+data) then
        free(t+data)
    end if
end procedure

function ReadTextureData(sequence filename, atom buffer)
integer stride,done
object f
atom p

    done=0
    stride = peek4u(buffer+width) * peek4u(buffer+format)   -- Size Of A Row (Width * Bytes Per Pixel)

    f = open(filename, "rb")                            -- Open "filename" For Reading Bytes
    if f != NULL then                                   -- If File Exists
        for i = peek4u(buffer+height) - 1 to 0 by -1 do   -- Loop Through Height (Bottoms Up - Flip Image)
            p = peek4u(buffer+data) + (i * stride)      --
            for j = 0 to peek4u(buffer+width) - 1 do            -- Loop Through Width
                for k = 0 to peek4u(buffer+format) - 2 do
                    poke(p,getc(f))                        -- Read Value >From File And Store In Memory
                    p += 1
                    done += 1
                end for
                poke(p,255)
                p += 1                                      -- Store 255 In Alpha Channel And Increase Pointer
            end for
        end for
        close(f)                                        -- Close The File
    end if

    return done                                         -- Returns Number Of Bytes Read In
end function

procedure BuildTexture(atom tex)

    c_proc(glGenTextures,{1,texture})
    c_proc(glBindTexture,{GL_TEXTURE_2D,peek4u(texture)})
    c_proc(glTexParameteri,{GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR})
    c_proc(glTexParameteri,{GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR})
    c_proc(gluBuild2DMipmaps,{GL_TEXTURE_2D, GL_RGB, peek4u(tex+width), peek4u(tex+height), GL_RGBA,
                              GL_UNSIGNED_BYTE, peek4u(tex+data)})
end procedure

procedure Blit(atom src, atom dst, integer src_xstart, integer src_ystart, integer src_width, integer src_height,
               integer dst_xstart, integer dst_ystart, integer blend, integer alpha)
atom s, d

    -- Clamp Alpha If Value Is Out Of Range
    if alpha > 255 then
        alpha = 255
    end if
    if alpha < 0 then
        alpha = 0
    end if

    -- Check For Incorrect Blend Flag Values
    if blend < 0 then
        blend = 0
    end if
    if blend > 1 then
        blend = 1
    end if

    d = peek4u(dst+data) + (dst_ystart * peek4u(dst+width) * peek4u(dst+format)) -- Start Row - dst (Row * Width In Pixels * Bytes Per Pixel)
    s = peek4u(src+data) + (src_ystart * peek4u(src+width) * peek4u(src+format)) -- Start Row - src (Row * Width In Pixels * Bytes Per Pixel)

    for i = 0 to src_height - 1 do                          -- Height Loop
        s += (src_xstart * peek4u(src+format)) -- Move Through Src Data By Bytes Per Pixel
        d += (dst_xstart * peek4u(dst+format)) -- Move Through Dst Data By Bytes Per Pixel
        for j = 0 to src_width - 1 do                           -- Width Loop
            for k = 0 to peek4u(src+format) - 1 do              -- "n" Bytes At A Time
                if blend then                                   -- If Blending Is On
                    poke(d, floor(((peek(s) * alpha) + (peek(d) * (255-alpha)))/256)) -- Multiply Src Data*alpha Add Dst Data*(255-alpha)
                else                                            -- Keep in 0-255 Range With / 256
                    poke(d, peek4u(s))                          -- No Blending Just Do A Straight Copy
                end if
                d += 1
                s += 1
            end for
        end for
        d += (peek4u(dst+width) - (src_width + dst_xstart)) * peek4u(dst+format)    -- Add End Of Row */
        s += (peek4u(src+width) - (src_width + src_xstart)) * peek4u(src+format)    -- Add End Of Row */
    end for
end procedure

procedure ReSizeGLScene(integer width, integer height)
    if height = 0 then
        height = 1
    end if
    c_proc(glViewport,{0,0,width,height})
    c_proc(glMatrixMode,{GL_PROJECTION})
    c_proc(glLoadIdentity,{})
    c_proc(gluPerspective,{45.0,width/height,0.1,100.0})
    c_proc(glMatrixMode,{GL_MODELVIEW})
    c_proc(glLoadIdentity,{})
end procedure

procedure InitGL()
    t1 = AllocateTextureBuffer( 256, 256, 4 )           -- Get An Image Structure
    if ReadTextureData("Data\\Monitor.raw",t1) = 0 then -- Fill The Image Structure With Data  -- Nothing Read?
        retval = message_box("Could Not Read 'Monitor.raw' Image Data","TEXTURE ERROR",MB_OK + MB_ICONINFORMATION)
    end if

    t2 = AllocateTextureBuffer( 256, 256, 4 )           -- Second Image Structure
    if ReadTextureData("Data\\GL.raw",t2) = 0 then      -- Fill The Image Structure With Data -- Nothing Read?
        retval = message_box("Could Not Read 'GL.raw' Image Data","TEXTURE ERROR",MB_OK + MB_ICONINFORMATION)
    end if

    -- Image To Blend In, Original Image, Src Start X & Y, Src Width & Height, Dst Location X & Y, Blend Flag, Alpha Value
    Blit(t2,t1,127,127,128,128,64,64,1,127)                 -- Call The Blitter Routine

    BuildTexture(t1)                                            -- Load The Texture Map Into Texture Memory

    DeallocateTexture(t1)                                   -- Clean Up Image Memory Because Texture Is
    DeallocateTexture(t2)                                   -- In GL Texture Memory Now

    c_proc(glEnable,{GL_TEXTURE_2D})                                    -- Enable Texture Mapping

    c_proc(glShadeModel,{GL_SMOOTH})                                    -- Enables Smooth Color Shading
    c_proc(glClearColor,{0.0, 0.0, 0.0, 0.0})                       -- This Will Clear The Background Color To Black
    c_proc(glClearDepth,{1.0})                                          -- Enables Clearing Of The Depth Buffer
    c_proc(glEnable,{GL_DEPTH_TEST})                                    -- Enables Depth Testing
    c_proc(glDepthFunc,{GL_LESS})                                       -- The Type Of Depth Test To Do
end procedure

function DrawGLScene()
    c_proc(glClear, {or_bits(GL_COLOR_BUFFER_BIT,GL_DEPTH_BUFFER_BIT)})
    c_proc(glLoadIdentity, {})
    c_proc(glTranslatef, {0.0,0.0,-5.0})

    c_proc(glRotatef, {xrot,1.0,0.0,0.0})
    c_proc(glRotatef, {yrot,0.0,1.0,0.0})
    c_proc(glRotatef, {zrot,0.0,0.0,1.0})

    c_proc(glBindTexture, {GL_TEXTURE_2D, peek4u(texture)})

    c_proc(glBegin, {GL_QUADS})
        -- Front Face
        c_proc(glNormal3f, { 0.0, 0.0, 1.0})
        c_proc(glTexCoord2f, {1.0, 1.0})  c_proc(glVertex3f, { 1.0,  1.0,  1.0})
        c_proc(glTexCoord2f, {0.0, 1.0})  c_proc(glVertex3f, {-1.0,  1.0,  1.0})
        c_proc(glTexCoord2f, {0.0, 0.0})  c_proc(glVertex3f, {-1.0, -1.0,  1.0})
        c_proc(glTexCoord2f, {1.0, 0.0})  c_proc(glVertex3f, { 1.0, -1.0,  1.0})
        -- Back Face
        c_proc(glNormal3f, { 0.0, 0.0,-1.0})
        c_proc(glTexCoord2f, {1.0, 1.0})  c_proc(glVertex3f, {-1.0,  1.0, -1.0})
        c_proc(glTexCoord2f, {0.0, 1.0})  c_proc(glVertex3f, { 1.0,  1.0, -1.0})
        c_proc(glTexCoord2f, {0.0, 0.0})  c_proc(glVertex3f, { 1.0, -1.0, -1.0})
        c_proc(glTexCoord2f, {1.0, 0.0})  c_proc(glVertex3f, {-1.0, -1.0, -1.0})
        -- Top Face
        c_proc(glNormal3f, { 0.0, 1.0, 0.0})
        c_proc(glTexCoord2f, {1.0, 1.0})  c_proc(glVertex3f, { 1.0,  1.0, -1.0})
        c_proc(glTexCoord2f, {0.0, 1.0})  c_proc(glVertex3f, {-1.0,  1.0, -1.0})
        c_proc(glTexCoord2f, {0.0, 0.0})  c_proc(glVertex3f, {-1.0,  1.0,  1.0})
        c_proc(glTexCoord2f, {1.0, 0.0})  c_proc(glVertex3f, { 1.0,  1.0,  1.0})
        -- Bottom Face
        c_proc(glNormal3f, { 0.0,-1.0, 0.0})
        c_proc(glTexCoord2f, {0.0, 0.0})  c_proc(glVertex3f, { 1.0, -1.0,  1.0})
        c_proc(glTexCoord2f, {1.0, 0.0})  c_proc(glVertex3f, {-1.0, -1.0,  1.0})
        c_proc(glTexCoord2f, {1.0, 1.0})  c_proc(glVertex3f, {-1.0, -1.0, -1.0})
        c_proc(glTexCoord2f, {0.0, 1.0})  c_proc(glVertex3f, { 1.0, -1.0, -1.0})
        -- Right Face
        c_proc(glNormal3f, { 1.0, 0.0, 0.0})
        c_proc(glTexCoord2f, {1.0, 0.0})  c_proc(glVertex3f, { 1.0, -1.0, -1.0})
        c_proc(glTexCoord2f, {1.0, 1.0})  c_proc(glVertex3f, { 1.0,  1.0, -1.0})
        c_proc(glTexCoord2f, {0.0, 1.0})  c_proc(glVertex3f, { 1.0,  1.0,  1.0})
        c_proc(glTexCoord2f, {0.0, 0.0})  c_proc(glVertex3f, { 1.0, -1.0,  1.0})
        -- Left Face
        c_proc(glNormal3f, {-1.0, 0.0, 0.0})
        c_proc(glTexCoord2f, {0.0, 0.0})  c_proc(glVertex3f, {-1.0, -1.0, -1.0})
        c_proc(glTexCoord2f, {1.0, 0.0})  c_proc(glVertex3f, {-1.0, -1.0,  1.0})
        c_proc(glTexCoord2f, {1.0, 1.0})  c_proc(glVertex3f, {-1.0,  1.0,  1.0})
        c_proc(glTexCoord2f, {0.0, 1.0})  c_proc(glVertex3f, {-1.0,  1.0, -1.0})
    c_proc(glEnd, {})

    xrot += 0.3
    yrot += 0.2
    zrot += 0.4

    return TRUE
end function

integer dmScreenSettings, WindowRect

procedure KillGLWindow()
    if fullscreen then
        if c_func(ChangeDisplaySettingsA,{NULL,0}) then end if
        if c_func(ShowCursor,{TRUE}) then end if
    end if
    if hRC then
        if c_func(wglMakeCurrent,{NULL,NULL}) then end if
        if c_func(wglDeleteContext,{hRC}) then end if
        hRC = NULL
    end if
    if hRC and not c_func(ReleaseDC,{hWnd,hDC}) then
        hDC = NULL
    end if
    if hWnd and not c_func(DestroyWindow,{hWnd}) then
        hWnd = NULL
    end if
    if dmScreenSettings then
        free(dmScreenSettings)
    end if
    free(WindowRect)
end procedure

function WndProc(atom hWnd, integer uMsg, atom wParam, atom lParam)
    if uMsg = WM_ACTIVATE then
        if not floor(wParam/#10000) then
            active = TRUE
        else
            active = FALSE
        end if
    elsif  uMsg = WM_SYSCOMMAND then
        if wParam = SC_SCREENSAVE then end if
        if wParam = SC_MONITORPOWER then end if
    elsif uMsg = WM_CLOSE then
        c_proc(PostQuitMessage,{0})
    elsif uMsg = WM_KEYDOWN then
        keys[wParam] = TRUE
    elsif uMsg = WM_KEYUP then
        keys[wParam] = FALSE
    elsif uMsg = WM_SIZE then
        ReSizeGLScene(and_bits(lParam,#FFFF),floor(lParam/#10000))
    end if
    return c_func(DefWindowProcA,{hWnd, uMsg, wParam, lParam})
end function

integer wc wc = allocate(40)
function ClassRegistration()
integer WndProcAddress, id
    id = routine_id("WndProc")
    if id = -1 then
    puts(1, "routine_id failed!\n")
    abort(1)
    end if
    WndProcAddress = call_back(id)
    hInstance = c_func(GetModuleHandleA,{NULL})
    ClassName = allocate_string("OpenGL")
    poke4(wc,or_all({CS_HREDRAW, CS_VREDRAW, CS_OWNDC}))
    poke4(wc+4,WndProcAddress)
    poke4(wc+8,0)
    poke4(wc+12,0)
    poke4(wc+16,hInstance)
    poke4(wc+20,c_func(LoadIconA,{NULL,IDI_WINLOGO}))
    poke4(wc+24,c_func(LoadCursorA,{NULL, IDC_ARROW}))
    poke4(wc+28,NULL)
    poke4(wc+32,NULL)
    poke4(wc+36,ClassName)
    if not c_func(RegisterClassA,{wc}) then
        retval = message_box("Failed to register class","Error", or_bits(MB_OK,MB_ICONINFORMATION))
        return FALSE
    else
        return TRUE
    end if
end function

integer regd regd = FALSE
procedure CreateGLWindow(atom title, integer width, integer height, integer bits, integer fullscreenflag)
    atom PixelFormat, pfd, dwExStyle, dwStyle
    sequence s
    if regd = FALSE then
        if ClassRegistration() then
            regd = TRUE
        end if
    end if
    fullscreen = fullscreenflag
    if fullscreen then
        dmScreenSettings = allocate(156)
        mem_set(dmScreenSettings,0,156)
        s = int_to_bytes(156)
        poke(dmScreenSettings + 36,{s[1],s[2]})
        poke4(dmScreenSettings + 40,or_all({DM_BITSPERPEL,DM_PELSWIDTH,DM_PELSHEIGHT}))
        poke4(dmScreenSettings + 104, bits)
        poke4(dmScreenSettings + 108, width)
        poke4(dmScreenSettings + 112, height)
        if c_func(ChangeDisplaySettingsA,{dmScreenSettings,CDS_FULLSCREEN}) != DISP_CHANGE_SUCCESSFUL then
            if message_box("The requested fullscreen mode is not supported by\nyour video card. " &
                           "Use windowed mode instead?","Error", or_bits(MB_YESNO,MB_ICONEXCLAMATION)) = IDYES then
            else
                retval = message_box("Program will now close","Error",or_bits(MB_OK,MB_ICONSTOP))
            end if
        end if
    else
        dmScreenSettings = NULL
    end if
    if fullscreen then
        dwExStyle = WS_EX_APPWINDOW
        dwStyle = WS_POPUP
        if c_func(ShowCursor,{FALSE}) then end if
    else
        dwExStyle = or_bits(WS_EX_APPWINDOW,WS_EX_WINDOWEDGE)
        dwStyle = WS_OVERLAPPEDWINDOW
    end if
    WindowRect = allocate(16)
    poke4(WindowRect,0)
    poke4(WindowRect + 4,width)
    poke4(WindowRect + 8, 0)
    poke4(WindowRect + 12, height)
    if c_func(AdjustWindowRectEx,{WindowRect, dwStyle, FALSE, dwExStyle}) then end if
    hWnd = c_func(CreateWindowExA,{dwExStyle,  --extended window style
                                   ClassName,  --class
                                   title,      --window caption
                                   or_all({WS_CLIPSIBLINGS,WS_CLIPCHILDREN,dwStyle}),  --window style
                                   0,
                                   0,
                                   peek4u(WindowRect + 4) - peek4u(WindowRect),
                                   peek4u(WindowRect + 12) - peek4u(WindowRect + 8),
                                   NULL,
                                   NULL,
                                   hInstance,
                                   NULL})
    if hWnd = NULL then
        KillGLWindow()
        retval = message_box("Window creation error","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    pfd = allocate(40)  --PIXELFORMATDESCRIPTOR
    mem_set(pfd,0,40)
    poke(pfd, 40)  --size of pfd structure
    poke(pfd + 2, 1) --version
    poke4(pfd + 4, or_all({PFD_DRAW_TO_WINDOW,PFD_SUPPORT_OPENGL,PFD_DOUBLEBUFFER})) --properties flags
    poke(pfd + 8, PFD_TYPE_RGBA)  --request an rgba format
    poke(pfd + 9, 24)  --select color depth
    poke(pfd + 23, 24)  --32bit Z-buffer

    hDC = c_func(GetDC,{hWnd})  --create GL device context to match window device context
    if not hDC then
        KillGLWindow()
        retval = message_box("Can't create a GL device context","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    PixelFormat = c_func(ChoosePixelFormat,{hDC,pfd})  --find a pixel format matching PIXELFORMATDESCRIPTOR
    if not PixelFormat then
        KillGLWindow()
        retval = message_box("Can't find a suitable pixel format","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    if not (c_func(SetPixelFormat,{hDC,PixelFormat,pfd})) then  --set the pixel format
        KillGLWindow()
        retval = message_box("Can't set the pixel format","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    if not c_func(DescribePixelFormat, {hDC,PixelFormat,40,pfd}) then
        retval = message_box("Can't describe the pixel format","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    hRC = c_func(wglCreateContext,{hDC})  --create GL rendering context
    if not hRC then
        KillGLWindow()
        retval = message_box("Can't create a GL rendering context","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    if not (c_func(wglMakeCurrent,{hDC,hRC})) then  --make the GL rendering context active
        KillGLWindow()
        retval = message_box("Can't activate the GL rendering context","Error",or_bits(MB_OK,MB_ICONEXCLAMATION))
    end if
    retval = c_func(ShowWindow,{hWnd,SW_SHOW}) --show the window
    retval = c_func(SetForegroundWindow,{hWnd}) --set it to always be in foreground
    retval = c_func(SetFocus,{hWnd}) --give it focus
    ReSizeGLScene(width, height)  --draw the GL scene to match the window size
    InitGL()  --initialize OpenGL
end procedure

integer MSG MSG = allocate(28)
integer title title = allocate_string("OpenGL")
procedure WinMain()
integer done, msg_message
    done = FALSE
    if message_box("Would you like to run in fullscreen mode?","Start Fullscreen?",or_bits(MB_YESNO,MB_ICONQUESTION)) = IDNO then
        fullscreen = FALSE
    else
        fullscreen = TRUE
    end if
    CreateGLWindow(title,640,480,24,fullscreen)
    while not done do
        if c_func(PeekMessageA,{MSG,NULL,0,0,PM_REMOVE}) then
            msg_message = peek4u(MSG+4)
            if msg_message = WM_QUIT then
                done = TRUE
            else
                retval = c_func(TranslateMessage,{MSG})
                retval = c_func(DispatchMessageA,{MSG})
            end if
        else
            if ((active and not DrawGLScene()) or keys[VK_ESCAPE]) then
                done = TRUE
            else
                retval = c_func(SwapBuffers,{hDC})
                if keys[VK_F1] then
                    keys[VK_F1] = FALSE
                    KillGLWindow()
                    if fullscreen = 0 then
                        fullscreen = 1
                    else
                        fullscreen = 0
                    end if
                    CreateGLWindow(title,640,480,24,fullscreen)
                end if
            end if
        end if
    end while
    KillGLWindow()
end procedure

WinMain()