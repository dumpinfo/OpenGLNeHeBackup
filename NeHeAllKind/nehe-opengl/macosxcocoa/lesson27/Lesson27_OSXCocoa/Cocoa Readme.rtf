{\rtf1\mac\ansicpg10000\cocoartf100
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9620\viewh7500\viewkind0
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs24 \cf0 This is the Mac OS X Cocoa port of NeHe's Tutorial #27 (http://nehe.gamedev.net/)\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0 \cf0 \
Implements all the features of Jeff Molofee's tutorial, using NSOpenGLView,\
including full-screen capability.\
\
There are two classes, 
\f2\i Lesson27Controller 
\f1\i0 and 
\f2\i Lesson27View
\f1\i0 .  The view is a subclass of NSOpenGLView, and implements all the necessary drawing.  By default, it creates a window 640x480, and creates a pixel format of 16 color bits and 16 depth bits.  Full-screen mode switches to 800x600, same color and depth bits.  This should work on any OS X machine.  Machines with smaller amounts of VRAM may need to drop the depth bits from 16 (but be sure it remains a power-of-two).\
\
One of the big differences architecturally is this implementation uses a rendering timer to update the view, instead of updating when idle.\
\
A (possibly quirky) difference is the call to gluPerspective() has to use 0.099 (or anything less than 0.1 technically) instead of 0.1 as the shadow seems to disappear when 0.1 is used.  Note this is the case on my ATI Radeon, but if I switch to the software renderer, this problem goes away.  Using 0.1 also works fine in GLUT.\
\
The 3Dobject code was split from a header file to both header and code.  Since it effectively is included in both the controller and view, keeping it in the header would cause multiple definition errors.\
\
Both the controller and view are Objective-C++ files this time, since we interface with some C++-specific stuff in 3Dobject.cpp.\
\
Port by Bryan Blackburn (http://www.withay.com/)}